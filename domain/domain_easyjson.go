// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package domain

import (
	json "encoding/json"
	_v4 "github.com/golang-jwt/jwt/v4"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3e1fa5ecDecodeMainDomain(in *jlexer.Lexer, out *UserStatistics) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "total_trainings":
			out.TotalTrainings = int(in.Int())
		case "medium_percentage":
			out.MediumPercentage = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeMainDomain(out *jwriter.Writer, in UserStatistics) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"total_trainings\":"
		out.RawString(prefix[1:])
		out.Int(int(in.TotalTrainings))
	}
	{
		const prefix string = ",\"medium_percentage\":"
		out.RawString(prefix)
		out.Int(int(in.MediumPercentage))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserStatistics) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeMainDomain(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserStatistics) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeMainDomain(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserStatistics) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeMainDomain(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserStatistics) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeMainDomain(l, v)
}
func easyjson3e1fa5ecDecodeMainDomain1(in *jlexer.Lexer, out *UserLimits) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "total_file_size":
			out.TotalFileSize = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeMainDomain1(out *jwriter.Writer, in UserLimits) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"total_file_size\":"
		out.RawString(prefix[1:])
		out.Int(int(in.TotalFileSize))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserLimits) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeMainDomain1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserLimits) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeMainDomain1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserLimits) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeMainDomain1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserLimits) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeMainDomain1(l, v)
}
func easyjson3e1fa5ecDecodeMainDomain2(in *jlexer.Lexer, out *UserInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "has_picture":
			out.HasPicture = bool(in.Bool())
		case "collections":
			if in.IsNull() {
				in.Skip()
				out.Collections = nil
			} else {
				in.Delim('[')
				if out.Collections == nil {
					if !in.IsDelim(']') {
						out.Collections = make([]string, 0, 4)
					} else {
						out.Collections = []string{}
					}
				} else {
					out.Collections = (out.Collections)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Collections = append(out.Collections, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "statistics":
			(out.Statistics).UnmarshalEasyJSON(in)
		case "favourite":
			if in.IsNull() {
				in.Skip()
				out.Favourite = nil
			} else {
				in.Delim('[')
				if out.Favourite == nil {
					if !in.IsDelim(']') {
						out.Favourite = make([]string, 0, 4)
					} else {
						out.Favourite = []string{}
					}
				} else {
					out.Favourite = (out.Favourite)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.Favourite = append(out.Favourite, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeMainDomain2(out *jwriter.Writer, in UserInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"has_picture\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasPicture))
	}
	{
		const prefix string = ",\"collections\":"
		out.RawString(prefix)
		if in.Collections == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Collections {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.String(string(v4))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"statistics\":"
		out.RawString(prefix)
		(in.Statistics).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"favourite\":"
		out.RawString(prefix)
		if in.Favourite == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Favourite {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeMainDomain2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeMainDomain2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeMainDomain2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeMainDomain2(l, v)
}
func easyjson3e1fa5ecDecodeMainDomain3(in *jlexer.Lexer, out *UserHistoryArray) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = int(in.Int())
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]HistoryItem, 0, 0)
					} else {
						out.Items = []HistoryItem{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v7 HistoryItem
					(v7).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeMainDomain3(out *jwriter.Writer, in UserHistoryArray) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Items {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserHistoryArray) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeMainDomain3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserHistoryArray) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeMainDomain3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserHistoryArray) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeMainDomain3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserHistoryArray) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeMainDomain3(l, v)
}
func easyjson3e1fa5ecDecodeMainDomain4(in *jlexer.Lexer, out *UserHistory) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = string(in.String())
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]HistoryItem, 0, 0)
					} else {
						out.Items = []HistoryItem{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v10 HistoryItem
					(v10).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeMainDomain4(out *jwriter.Writer, in UserHistory) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Items {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserHistory) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeMainDomain4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserHistory) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeMainDomain4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserHistory) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeMainDomain4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserHistory) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeMainDomain4(l, v)
}
func easyjson3e1fa5ecDecodeMainDomain5(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "has_picture":
			out.HasPicture = bool(in.Bool())
		case "collections":
			if in.IsNull() {
				in.Skip()
				out.Collections = nil
			} else {
				in.Delim('[')
				if out.Collections == nil {
					if !in.IsDelim(']') {
						out.Collections = make([]string, 0, 4)
					} else {
						out.Collections = []string{}
					}
				} else {
					out.Collections = (out.Collections)[:0]
				}
				for !in.IsDelim(']') {
					var v13 string
					v13 = string(in.String())
					out.Collections = append(out.Collections, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "favourite":
			if in.IsNull() {
				in.Skip()
				out.Favourite = nil
			} else {
				in.Delim('[')
				if out.Favourite == nil {
					if !in.IsDelim(']') {
						out.Favourite = make([]string, 0, 4)
					} else {
						out.Favourite = []string{}
					}
				} else {
					out.Favourite = (out.Favourite)[:0]
				}
				for !in.IsDelim(']') {
					var v14 string
					v14 = string(in.String())
					out.Favourite = append(out.Favourite, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "statistics":
			(out.Statistics).UnmarshalEasyJSON(in)
		case "limits":
			(out.Limits).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeMainDomain5(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"has_picture\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasPicture))
	}
	{
		const prefix string = ",\"collections\":"
		out.RawString(prefix)
		if in.Collections == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.Collections {
				if v15 > 0 {
					out.RawByte(',')
				}
				out.String(string(v16))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"favourite\":"
		out.RawString(prefix)
		if in.Favourite == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Favourite {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.String(string(v18))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"statistics\":"
		out.RawString(prefix)
		(in.Statistics).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"limits\":"
		out.RawString(prefix)
		(in.Limits).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeMainDomain5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeMainDomain5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeMainDomain5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeMainDomain5(l, v)
}
func easyjson3e1fa5ecDecodeMainDomain6(in *jlexer.Lexer, out *UploadCardPhotoResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "object_name":
			out.ObjectName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeMainDomain6(out *jwriter.Writer, in UploadCardPhotoResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"object_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.ObjectName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UploadCardPhotoResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeMainDomain6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UploadCardPhotoResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeMainDomain6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UploadCardPhotoResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeMainDomain6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UploadCardPhotoResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeMainDomain6(l, v)
}
func easyjson3e1fa5ecDecodeMainDomain7(in *jlexer.Lexer, out *SuccessResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeMainDomain7(out *jwriter.Writer, in SuccessResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SuccessResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeMainDomain7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SuccessResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeMainDomain7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SuccessResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeMainDomain7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SuccessResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeMainDomain7(l, v)
}
func easyjson3e1fa5ecDecodeMainDomain8(in *jlexer.Lexer, out *SmallHistoryItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "collection_name":
			out.CollectionName = string(in.String())
		case "time":
			out.Time = int(in.Int())
		case "correct_cards":
			if in.IsNull() {
				in.Skip()
				out.CorrectCards = nil
			} else {
				in.Delim('[')
				if out.CorrectCards == nil {
					if !in.IsDelim(']') {
						out.CorrectCards = make([]int, 0, 8)
					} else {
						out.CorrectCards = []int{}
					}
				} else {
					out.CorrectCards = (out.CorrectCards)[:0]
				}
				for !in.IsDelim(']') {
					var v19 int
					v19 = int(in.Int())
					out.CorrectCards = append(out.CorrectCards, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "incorrect_cards":
			if in.IsNull() {
				in.Skip()
				out.IncorrectCards = nil
			} else {
				in.Delim('[')
				if out.IncorrectCards == nil {
					if !in.IsDelim(']') {
						out.IncorrectCards = make([]int, 0, 8)
					} else {
						out.IncorrectCards = []int{}
					}
				} else {
					out.IncorrectCards = (out.IncorrectCards)[:0]
				}
				for !in.IsDelim(']') {
					var v20 int
					v20 = int(in.Int())
					out.IncorrectCards = append(out.IncorrectCards, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "all_cards_count":
			out.AllCardsCount = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeMainDomain8(out *jwriter.Writer, in SmallHistoryItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"collection_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.CollectionName))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Int(int(in.Time))
	}
	{
		const prefix string = ",\"correct_cards\":"
		out.RawString(prefix)
		if in.CorrectCards == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v21, v22 := range in.CorrectCards {
				if v21 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v22))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"incorrect_cards\":"
		out.RawString(prefix)
		if in.IncorrectCards == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.IncorrectCards {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v24))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"all_cards_count\":"
		out.RawString(prefix)
		out.Int(int(in.AllCardsCount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SmallHistoryItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeMainDomain8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SmallHistoryItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeMainDomain8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SmallHistoryItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeMainDomain8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SmallHistoryItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeMainDomain8(l, v)
}
func easyjson3e1fa5ecDecodeMainDomain9(in *jlexer.Lexer, out *SignupResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.UserID = string(in.String())
		case "access_token":
			out.AccessToken = string(in.String())
		case "refresh_token":
			out.RefreshToken = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeMainDomain9(out *jwriter.Writer, in SignupResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"access_token\":"
		out.RawString(prefix)
		out.String(string(in.AccessToken))
	}
	{
		const prefix string = ",\"refresh_token\":"
		out.RawString(prefix)
		out.String(string(in.RefreshToken))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SignupResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeMainDomain9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SignupResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeMainDomain9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SignupResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeMainDomain9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SignupResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeMainDomain9(l, v)
}
func easyjson3e1fa5ecDecodeMainDomain10(in *jlexer.Lexer, out *SignupRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "username":
			out.Username = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeMainDomain10(out *jwriter.Writer, in SignupRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SignupRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeMainDomain10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SignupRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeMainDomain10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SignupRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeMainDomain10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SignupRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeMainDomain10(l, v)
}
func easyjson3e1fa5ecDecodeMainDomain11(in *jlexer.Lexer, out *RightAnswerItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "card_id":
			out.CardID = int(in.Int())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeMainDomain11(out *jwriter.Writer, in RightAnswerItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"card_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.CardID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RightAnswerItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeMainDomain11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RightAnswerItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeMainDomain11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RightAnswerItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeMainDomain11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RightAnswerItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeMainDomain11(l, v)
}
func easyjson3e1fa5ecDecodeMainDomain12(in *jlexer.Lexer, out *RefreshTokenResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "access_token":
			out.AccessToken = string(in.String())
		case "refresh_token":
			out.RefreshToken = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeMainDomain12(out *jwriter.Writer, in RefreshTokenResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"access_token\":"
		out.RawString(prefix[1:])
		out.String(string(in.AccessToken))
	}
	{
		const prefix string = ",\"refresh_token\":"
		out.RawString(prefix)
		out.String(string(in.RefreshToken))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RefreshTokenResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeMainDomain12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RefreshTokenResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeMainDomain12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RefreshTokenResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeMainDomain12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RefreshTokenResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeMainDomain12(l, v)
}
func easyjson3e1fa5ecDecodeMainDomain13(in *jlexer.Lexer, out *RefreshTokenRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "refresh_token":
			out.RefreshToken = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeMainDomain13(out *jwriter.Writer, in RefreshTokenRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"refresh_token\":"
		out.RawString(prefix[1:])
		out.String(string(in.RefreshToken))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RefreshTokenRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeMainDomain13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RefreshTokenRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeMainDomain13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RefreshTokenRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeMainDomain13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RefreshTokenRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeMainDomain13(l, v)
}
func easyjson3e1fa5ecDecodeMainDomain14(in *jlexer.Lexer, out *PublicUserInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "has_picture":
			out.HasPicture = bool(in.Bool())
		case "collections":
			if in.IsNull() {
				in.Skip()
				out.PublicCollections = nil
			} else {
				in.Delim('[')
				if out.PublicCollections == nil {
					if !in.IsDelim(']') {
						out.PublicCollections = make([]string, 0, 4)
					} else {
						out.PublicCollections = []string{}
					}
				} else {
					out.PublicCollections = (out.PublicCollections)[:0]
				}
				for !in.IsDelim(']') {
					var v25 string
					v25 = string(in.String())
					out.PublicCollections = append(out.PublicCollections, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "statistics":
			(out.Statistics).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeMainDomain14(out *jwriter.Writer, in PublicUserInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"has_picture\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasPicture))
	}
	{
		const prefix string = ",\"collections\":"
		out.RawString(prefix)
		if in.PublicCollections == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.PublicCollections {
				if v26 > 0 {
					out.RawByte(',')
				}
				out.String(string(v27))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"statistics\":"
		out.RawString(prefix)
		(in.Statistics).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PublicUserInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeMainDomain14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PublicUserInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeMainDomain14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PublicUserInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeMainDomain14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PublicUserInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeMainDomain14(l, v)
}
func easyjson3e1fa5ecDecodeMainDomain15(in *jlexer.Lexer, out *PlanResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = int(in.Int())
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]int, 0, 8)
					} else {
						out.Items = []int{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v28 int
					v28 = int(in.Int())
					out.Items = append(out.Items, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeMainDomain15(out *jwriter.Writer, in PlanResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.Items {
				if v29 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v30))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PlanResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeMainDomain15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlanResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeMainDomain15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PlanResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeMainDomain15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlanResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeMainDomain15(l, v)
}
func easyjson3e1fa5ecDecodeMainDomain16(in *jlexer.Lexer, out *OtherAnswers) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = int(in.Int())
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]string, 0, 4)
					} else {
						out.Items = []string{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v31 string
					v31 = string(in.String())
					out.Items = append(out.Items, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeMainDomain16(out *jwriter.Writer, in OtherAnswers) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.Items {
				if v32 > 0 {
					out.RawByte(',')
				}
				out.String(string(v33))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OtherAnswers) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeMainDomain16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OtherAnswers) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeMainDomain16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OtherAnswers) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeMainDomain16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OtherAnswers) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeMainDomain16(l, v)
}
func easyjson3e1fa5ecDecodeMainDomain17(in *jlexer.Lexer, out *LoginResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "access_token":
			out.AccessToken = string(in.String())
		case "refresh_token":
			out.RefreshToken = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeMainDomain17(out *jwriter.Writer, in LoginResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"access_token\":"
		out.RawString(prefix[1:])
		out.String(string(in.AccessToken))
	}
	{
		const prefix string = ",\"refresh_token\":"
		out.RawString(prefix)
		out.String(string(in.RefreshToken))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LoginResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeMainDomain17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LoginResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeMainDomain17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LoginResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeMainDomain17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LoginResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeMainDomain17(l, v)
}
func easyjson3e1fa5ecDecodeMainDomain18(in *jlexer.Lexer, out *LoginRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeMainDomain18(out *jwriter.Writer, in LoginRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix[1:])
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LoginRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeMainDomain18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LoginRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeMainDomain18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LoginRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeMainDomain18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LoginRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeMainDomain18(l, v)
}
func easyjson3e1fa5ecDecodeMainDomain19(in *jlexer.Lexer, out *JwtCustomRefreshClaims) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "iss":
			out.Issuer = string(in.String())
		case "sub":
			out.Subject = string(in.String())
		case "aud":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Audience).UnmarshalJSON(data))
			}
		case "exp":
			if in.IsNull() {
				in.Skip()
				out.ExpiresAt = nil
			} else {
				if out.ExpiresAt == nil {
					out.ExpiresAt = new(_v4.NumericDate)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ExpiresAt).UnmarshalJSON(data))
				}
			}
		case "nbf":
			if in.IsNull() {
				in.Skip()
				out.NotBefore = nil
			} else {
				if out.NotBefore == nil {
					out.NotBefore = new(_v4.NumericDate)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.NotBefore).UnmarshalJSON(data))
				}
			}
		case "iat":
			if in.IsNull() {
				in.Skip()
				out.IssuedAt = nil
			} else {
				if out.IssuedAt == nil {
					out.IssuedAt = new(_v4.NumericDate)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.IssuedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeMainDomain19(out *jwriter.Writer, in JwtCustomRefreshClaims) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Issuer != "" {
		const prefix string = ",\"iss\":"
		out.RawString(prefix)
		out.String(string(in.Issuer))
	}
	if in.Subject != "" {
		const prefix string = ",\"sub\":"
		out.RawString(prefix)
		out.String(string(in.Subject))
	}
	if len(in.Audience) != 0 {
		const prefix string = ",\"aud\":"
		out.RawString(prefix)
		out.Raw((in.Audience).MarshalJSON())
	}
	if in.ExpiresAt != nil {
		const prefix string = ",\"exp\":"
		out.RawString(prefix)
		out.Raw((*in.ExpiresAt).MarshalJSON())
	}
	if in.NotBefore != nil {
		const prefix string = ",\"nbf\":"
		out.RawString(prefix)
		out.Raw((*in.NotBefore).MarshalJSON())
	}
	if in.IssuedAt != nil {
		const prefix string = ",\"iat\":"
		out.RawString(prefix)
		out.Raw((*in.IssuedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v JwtCustomRefreshClaims) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeMainDomain19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v JwtCustomRefreshClaims) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeMainDomain19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *JwtCustomRefreshClaims) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeMainDomain19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *JwtCustomRefreshClaims) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeMainDomain19(l, v)
}
func easyjson3e1fa5ecDecodeMainDomain20(in *jlexer.Lexer, out *JwtCustomClaims) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "username":
			out.Username = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "iss":
			out.Issuer = string(in.String())
		case "sub":
			out.Subject = string(in.String())
		case "aud":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Audience).UnmarshalJSON(data))
			}
		case "exp":
			if in.IsNull() {
				in.Skip()
				out.ExpiresAt = nil
			} else {
				if out.ExpiresAt == nil {
					out.ExpiresAt = new(_v4.NumericDate)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ExpiresAt).UnmarshalJSON(data))
				}
			}
		case "nbf":
			if in.IsNull() {
				in.Skip()
				out.NotBefore = nil
			} else {
				if out.NotBefore == nil {
					out.NotBefore = new(_v4.NumericDate)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.NotBefore).UnmarshalJSON(data))
				}
			}
		case "iat":
			if in.IsNull() {
				in.Skip()
				out.IssuedAt = nil
			} else {
				if out.IssuedAt == nil {
					out.IssuedAt = new(_v4.NumericDate)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.IssuedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeMainDomain20(out *jwriter.Writer, in JwtCustomClaims) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	if in.Issuer != "" {
		const prefix string = ",\"iss\":"
		out.RawString(prefix)
		out.String(string(in.Issuer))
	}
	if in.Subject != "" {
		const prefix string = ",\"sub\":"
		out.RawString(prefix)
		out.String(string(in.Subject))
	}
	if len(in.Audience) != 0 {
		const prefix string = ",\"aud\":"
		out.RawString(prefix)
		out.Raw((in.Audience).MarshalJSON())
	}
	if in.ExpiresAt != nil {
		const prefix string = ",\"exp\":"
		out.RawString(prefix)
		out.Raw((*in.ExpiresAt).MarshalJSON())
	}
	if in.NotBefore != nil {
		const prefix string = ",\"nbf\":"
		out.RawString(prefix)
		out.Raw((*in.NotBefore).MarshalJSON())
	}
	if in.IssuedAt != nil {
		const prefix string = ",\"iat\":"
		out.RawString(prefix)
		out.Raw((*in.IssuedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v JwtCustomClaims) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeMainDomain20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v JwtCustomClaims) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeMainDomain20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *JwtCustomClaims) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeMainDomain20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *JwtCustomClaims) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeMainDomain20(l, v)
}
func easyjson3e1fa5ecDecodeMainDomain21(in *jlexer.Lexer, out *HistoryItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "collection_id":
			out.CollectionID = string(in.String())
		case "collection_name":
			out.CollectionName = string(in.String())
		case "time":
			out.Time = int(in.Int())
		case "correct_cards":
			if in.IsNull() {
				in.Skip()
				out.CorrectCards = nil
			} else {
				in.Delim('[')
				if out.CorrectCards == nil {
					if !in.IsDelim(']') {
						out.CorrectCards = make([]int, 0, 8)
					} else {
						out.CorrectCards = []int{}
					}
				} else {
					out.CorrectCards = (out.CorrectCards)[:0]
				}
				for !in.IsDelim(']') {
					var v34 int
					v34 = int(in.Int())
					out.CorrectCards = append(out.CorrectCards, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "incorrect_cards":
			if in.IsNull() {
				in.Skip()
				out.IncorrectCards = nil
			} else {
				in.Delim('[')
				if out.IncorrectCards == nil {
					if !in.IsDelim(']') {
						out.IncorrectCards = make([]int, 0, 8)
					} else {
						out.IncorrectCards = []int{}
					}
				} else {
					out.IncorrectCards = (out.IncorrectCards)[:0]
				}
				for !in.IsDelim(']') {
					var v35 int
					v35 = int(in.Int())
					out.IncorrectCards = append(out.IncorrectCards, v35)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "all_cards_count":
			out.AllCardsCount = int(in.Int())
		case "errors":
			if in.IsNull() {
				in.Skip()
				out.Errors = nil
			} else {
				in.Delim('[')
				if out.Errors == nil {
					if !in.IsDelim(']') {
						out.Errors = make([]ErrorItem, 0, 0)
					} else {
						out.Errors = []ErrorItem{}
					}
				} else {
					out.Errors = (out.Errors)[:0]
				}
				for !in.IsDelim(']') {
					var v36 ErrorItem
					(v36).UnmarshalEasyJSON(in)
					out.Errors = append(out.Errors, v36)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "right_answers":
			if in.IsNull() {
				in.Skip()
				out.RightAnswers = nil
			} else {
				in.Delim('[')
				if out.RightAnswers == nil {
					if !in.IsDelim(']') {
						out.RightAnswers = make([]RightAnswerItem, 0, 2)
					} else {
						out.RightAnswers = []RightAnswerItem{}
					}
				} else {
					out.RightAnswers = (out.RightAnswers)[:0]
				}
				for !in.IsDelim(']') {
					var v37 RightAnswerItem
					(v37).UnmarshalEasyJSON(in)
					out.RightAnswers = append(out.RightAnswers, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeMainDomain21(out *jwriter.Writer, in HistoryItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"collection_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.CollectionID))
	}
	{
		const prefix string = ",\"collection_name\":"
		out.RawString(prefix)
		out.String(string(in.CollectionName))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Int(int(in.Time))
	}
	{
		const prefix string = ",\"correct_cards\":"
		out.RawString(prefix)
		if in.CorrectCards == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v38, v39 := range in.CorrectCards {
				if v38 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v39))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"incorrect_cards\":"
		out.RawString(prefix)
		if in.IncorrectCards == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v40, v41 := range in.IncorrectCards {
				if v40 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v41))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"all_cards_count\":"
		out.RawString(prefix)
		out.Int(int(in.AllCardsCount))
	}
	{
		const prefix string = ",\"errors\":"
		out.RawString(prefix)
		if in.Errors == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v42, v43 := range in.Errors {
				if v42 > 0 {
					out.RawByte(',')
				}
				(v43).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"right_answers\":"
		out.RawString(prefix)
		if in.RightAnswers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v44, v45 := range in.RightAnswers {
				if v44 > 0 {
					out.RawByte(',')
				}
				(v45).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HistoryItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeMainDomain21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HistoryItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeMainDomain21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HistoryItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeMainDomain21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HistoryItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeMainDomain21(l, v)
}
func easyjson3e1fa5ecDecodeMainDomain22(in *jlexer.Lexer, out *FavouriteButtonRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "favourite_filter_button":
			out.FilterClicks = int(in.Int())
		case "favourite_profile_button":
			out.ProfileClicks = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeMainDomain22(out *jwriter.Writer, in FavouriteButtonRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"favourite_filter_button\":"
		out.RawString(prefix[1:])
		out.Int(int(in.FilterClicks))
	}
	{
		const prefix string = ",\"favourite_profile_button\":"
		out.RawString(prefix)
		out.Int(int(in.ProfileClicks))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FavouriteButtonRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeMainDomain22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FavouriteButtonRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeMainDomain22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FavouriteButtonRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeMainDomain22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FavouriteButtonRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeMainDomain22(l, v)
}
func easyjson3e1fa5ecDecodeMainDomain23(in *jlexer.Lexer, out *ErrorItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "card_id":
			out.CardID = int(in.Int())
		case "question":
			out.Question = string(in.String())
		case "answer":
			out.Answer = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "user_answer":
			out.UserAnswer = string(in.String())
		case "blank_answer":
			out.BlankAnswer = string(in.String())
		case "attachment":
			out.Attachment = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeMainDomain23(out *jwriter.Writer, in ErrorItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"card_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.CardID))
	}
	{
		const prefix string = ",\"question\":"
		out.RawString(prefix)
		out.String(string(in.Question))
	}
	{
		const prefix string = ",\"answer\":"
		out.RawString(prefix)
		out.String(string(in.Answer))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"user_answer\":"
		out.RawString(prefix)
		out.String(string(in.UserAnswer))
	}
	{
		const prefix string = ",\"blank_answer\":"
		out.RawString(prefix)
		out.String(string(in.BlankAnswer))
	}
	{
		const prefix string = ",\"attachment\":"
		out.RawString(prefix)
		out.String(string(in.Attachment))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ErrorItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeMainDomain23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ErrorItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeMainDomain23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ErrorItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeMainDomain23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ErrorItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeMainDomain23(l, v)
}
func easyjson3e1fa5ecDecodeMainDomain24(in *jlexer.Lexer, out *CollectionPreviewArray) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = int(in.Int())
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]CollectionPreview, 0, 1)
					} else {
						out.Items = []CollectionPreview{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v46 CollectionPreview
					(v46).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeMainDomain24(out *jwriter.Writer, in CollectionPreviewArray) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v47, v48 := range in.Items {
				if v47 > 0 {
					out.RawByte(',')
				}
				(v48).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CollectionPreviewArray) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeMainDomain24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CollectionPreviewArray) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeMainDomain24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CollectionPreviewArray) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeMainDomain24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CollectionPreviewArray) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeMainDomain24(l, v)
}
func easyjson3e1fa5ecDecodeMainDomain25(in *jlexer.Lexer, out *CollectionPreview) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "is_public":
			out.IsPublic = bool(in.Bool())
		case "cards_count":
			out.CardsCount = int(in.Int())
		case "likes":
			out.Likes = int(in.Int())
		case "trainings":
			out.Trainings = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeMainDomain25(out *jwriter.Writer, in CollectionPreview) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"is_public\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPublic))
	}
	{
		const prefix string = ",\"cards_count\":"
		out.RawString(prefix)
		out.Int(int(in.CardsCount))
	}
	{
		const prefix string = ",\"likes\":"
		out.RawString(prefix)
		out.Int(int(in.Likes))
	}
	{
		const prefix string = ",\"trainings\":"
		out.RawString(prefix)
		out.Int(int(in.Trainings))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CollectionPreview) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeMainDomain25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CollectionPreview) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeMainDomain25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CollectionPreview) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeMainDomain25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CollectionPreview) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeMainDomain25(l, v)
}
func easyjson3e1fa5ecDecodeMainDomain26(in *jlexer.Lexer, out *CollectionInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "is_public":
			out.IsPublic = bool(in.Bool())
		case "cards":
			if in.IsNull() {
				in.Skip()
				out.Cards = nil
			} else {
				in.Delim('[')
				if out.Cards == nil {
					if !in.IsDelim(']') {
						out.Cards = make([]Card, 0, 0)
					} else {
						out.Cards = []Card{}
					}
				} else {
					out.Cards = (out.Cards)[:0]
				}
				for !in.IsDelim(']') {
					var v49 Card
					(v49).UnmarshalEasyJSON(in)
					out.Cards = append(out.Cards, v49)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "author":
			out.Author = string(in.String())
		case "likes":
			out.Likes = int(in.Int())
		case "trainings":
			out.Trainings = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeMainDomain26(out *jwriter.Writer, in CollectionInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"is_public\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPublic))
	}
	{
		const prefix string = ",\"cards\":"
		out.RawString(prefix)
		if in.Cards == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v50, v51 := range in.Cards {
				if v50 > 0 {
					out.RawByte(',')
				}
				(v51).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		out.String(string(in.Author))
	}
	{
		const prefix string = ",\"likes\":"
		out.RawString(prefix)
		out.Int(int(in.Likes))
	}
	{
		const prefix string = ",\"trainings\":"
		out.RawString(prefix)
		out.Int(int(in.Trainings))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CollectionInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeMainDomain26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CollectionInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeMainDomain26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CollectionInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeMainDomain26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CollectionInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeMainDomain26(l, v)
}
func easyjson3e1fa5ecDecodeMainDomain27(in *jlexer.Lexer, out *CollectionHistory) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "collection_id":
			out.CollectionID = string(in.String())
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]SmallHistoryItem, 0, 0)
					} else {
						out.Items = []SmallHistoryItem{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v52 SmallHistoryItem
					(v52).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v52)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeMainDomain27(out *jwriter.Writer, in CollectionHistory) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"collection_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.CollectionID))
	}
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v53, v54 := range in.Items {
				if v53 > 0 {
					out.RawByte(',')
				}
				(v54).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CollectionHistory) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeMainDomain27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CollectionHistory) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeMainDomain27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CollectionHistory) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeMainDomain27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CollectionHistory) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeMainDomain27(l, v)
}
func easyjson3e1fa5ecDecodeMainDomain28(in *jlexer.Lexer, out *Collection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "name_lower":
			out.NameLower = string(in.String())
		case "is_public":
			out.IsPublic = bool(in.Bool())
		case "cards":
			if in.IsNull() {
				in.Skip()
				out.Cards = nil
			} else {
				in.Delim('[')
				if out.Cards == nil {
					if !in.IsDelim(']') {
						out.Cards = make([]Card, 0, 0)
					} else {
						out.Cards = []Card{}
					}
				} else {
					out.Cards = (out.Cards)[:0]
				}
				for !in.IsDelim(']') {
					var v55 Card
					(v55).UnmarshalEasyJSON(in)
					out.Cards = append(out.Cards, v55)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "max_id":
			out.MaxId = int(in.Int())
		case "author":
			out.Author = string(in.String())
		case "likes":
			out.Likes = int(in.Int())
		case "trainings":
			out.Trainings = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeMainDomain28(out *jwriter.Writer, in Collection) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"name_lower\":"
		out.RawString(prefix)
		out.String(string(in.NameLower))
	}
	{
		const prefix string = ",\"is_public\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPublic))
	}
	{
		const prefix string = ",\"cards\":"
		out.RawString(prefix)
		if in.Cards == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v56, v57 := range in.Cards {
				if v56 > 0 {
					out.RawByte(',')
				}
				(v57).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"max_id\":"
		out.RawString(prefix)
		out.Int(int(in.MaxId))
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		out.String(string(in.Author))
	}
	{
		const prefix string = ",\"likes\":"
		out.RawString(prefix)
		out.Int(int(in.Likes))
	}
	{
		const prefix string = ",\"trainings\":"
		out.RawString(prefix)
		out.Int(int(in.Trainings))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Collection) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeMainDomain28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Collection) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeMainDomain28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Collection) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeMainDomain28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Collection) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeMainDomain28(l, v)
}
func easyjson3e1fa5ecDecodeMainDomain29(in *jlexer.Lexer, out *Card) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "local_id":
			out.LocalID = int(in.Int())
		case "question":
			out.Question = string(in.String())
		case "answer":
			out.Answer = string(in.String())
		case "attachment":
			out.Attachment = string(in.String())
		case "other_answers":
			(out.OtherAnswers).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeMainDomain29(out *jwriter.Writer, in Card) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"local_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.LocalID))
	}
	{
		const prefix string = ",\"question\":"
		out.RawString(prefix)
		out.String(string(in.Question))
	}
	{
		const prefix string = ",\"answer\":"
		out.RawString(prefix)
		out.String(string(in.Answer))
	}
	{
		const prefix string = ",\"attachment\":"
		out.RawString(prefix)
		out.String(string(in.Attachment))
	}
	{
		const prefix string = ",\"other_answers\":"
		out.RawString(prefix)
		(in.OtherAnswers).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Card) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeMainDomain29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Card) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeMainDomain29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Card) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeMainDomain29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Card) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeMainDomain29(l, v)
}
