// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// GlobalUseCase is an autogenerated mock type for the GlobalUseCase type
type GlobalUseCase struct {
	mock.Mock
}

// GetTrainingPlan provides a mock function with given fields: start, end, preferredTime
func (_m *GlobalUseCase) GetTrainingPlan(start int, end int, preferredTime int) []int {
	ret := _m.Called(start, end, preferredTime)

	if len(ret) == 0 {
		panic("no return value specified for GetTrainingPlan")
	}

	var r0 []int
	if rf, ok := ret.Get(0).(func(int, int, int) []int); ok {
		r0 = rf(start, end, preferredTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	return r0
}

// TrackFavouriteButtons provides a mock function with given fields: filterClicks, profileClicks
func (_m *GlobalUseCase) TrackFavouriteButtons(filterClicks int, profileClicks int) error {
	ret := _m.Called(filterClicks, profileClicks)

	if len(ret) == 0 {
		panic("no return value specified for TrackFavouriteButtons")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(filterClicks, profileClicks)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewGlobalUseCase creates a new instance of GlobalUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGlobalUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *GlobalUseCase {
	mock := &GlobalUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
