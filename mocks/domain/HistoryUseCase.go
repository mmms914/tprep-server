// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "main/domain"

	mock "github.com/stretchr/testify/mock"
)

// HistoryUseCase is an autogenerated mock type for the HistoryUseCase type
type HistoryUseCase struct {
	mock.Mock
}

// AddTraining provides a mock function with given fields: c, userID, historyItem
func (_m *HistoryUseCase) AddTraining(c context.Context, userID string, historyItem domain.HistoryItem) error {
	ret := _m.Called(c, userID, historyItem)

	if len(ret) == 0 {
		panic("no return value specified for AddTraining")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.HistoryItem) error); ok {
		r0 = rf(c, userID, historyItem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserHistoryFromTime provides a mock function with given fields: c, userID, fromTime
func (_m *HistoryUseCase) GetUserHistoryFromTime(c context.Context, userID string, fromTime int) ([]domain.HistoryItem, error) {
	ret := _m.Called(c, userID, fromTime)

	if len(ret) == 0 {
		panic("no return value specified for GetUserHistoryFromTime")
	}

	var r0 []domain.HistoryItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) ([]domain.HistoryItem, error)); ok {
		return rf(c, userID, fromTime)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) []domain.HistoryItem); ok {
		r0 = rf(c, userID, fromTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.HistoryItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(c, userID, fromTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewHistoryUseCase creates a new instance of HistoryUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHistoryUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *HistoryUseCase {
	mock := &HistoryUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
