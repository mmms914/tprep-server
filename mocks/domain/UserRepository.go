// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	database "main/database"

	domain "main/domain"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// AddCollection provides a mock function with given fields: c, userID, collectionID, collectionType
func (_m *UserRepository) AddCollection(c context.Context, userID string, collectionID string, collectionType string) error {
	ret := _m.Called(c, userID, collectionID, collectionType)

	if len(ret) == 0 {
		panic("no return value specified for AddCollection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(c, userID, collectionID, collectionType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: c, user
func (_m *UserRepository) Create(c context.Context, user *domain.User) (string, error) {
	ret := _m.Called(c, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) (string, error)); ok {
		return rf(c, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) string); ok {
		r0 = rf(c, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.User) error); ok {
		r1 = rf(c, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteByID provides a mock function with given fields: c, userID
func (_m *UserRepository) DeleteByID(c context.Context, userID string) error {
	ret := _m.Called(c, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(c, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCollection provides a mock function with given fields: c, userID, collectionID, collectionType
func (_m *UserRepository) DeleteCollection(c context.Context, userID string, collectionID string, collectionType string) error {
	ret := _m.Called(c, userID, collectionID, collectionType)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCollection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(c, userID, collectionID, collectionType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByEmail provides a mock function with given fields: c, email
func (_m *UserRepository) GetByEmail(c context.Context, email string) (domain.User, error) {
	ret := _m.Called(c, email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.User, error)); ok {
		return rf(c, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.User); ok {
		r0 = rf(c, email)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: c, userID
func (_m *UserRepository) GetByID(c context.Context, userID string) (domain.User, error) {
	ret := _m.Called(c, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.User, error)); ok {
		return rf(c, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.User); ok {
		r0 = rf(c, userID)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: c, filter, update
func (_m *UserRepository) Update(c context.Context, filter interface{}, update interface{}) (database.UpdateResult, error) {
	ret := _m.Called(c, filter, update)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 database.UpdateResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}) (database.UpdateResult, error)); ok {
		return rf(c, filter, update)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}) database.UpdateResult); ok {
		r0 = rf(c, filter, update)
	} else {
		r0 = ret.Get(0).(database.UpdateResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, interface{}) error); ok {
		r1 = rf(c, filter, update)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateByID provides a mock function with given fields: c, userID, update
func (_m *UserRepository) UpdateByID(c context.Context, userID string, update interface{}) (database.UpdateResult, error) {
	ret := _m.Called(c, userID, update)

	if len(ret) == 0 {
		panic("no return value specified for UpdateByID")
	}

	var r0 database.UpdateResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) (database.UpdateResult, error)); ok {
		return rf(c, userID, update)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) database.UpdateResult); ok {
		r0 = rf(c, userID, update)
	} else {
		r0 = ret.Get(0).(database.UpdateResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(c, userID, update)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
