// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "main/domain"

	mock "github.com/stretchr/testify/mock"
)

// CollectionHistoryRepository is an autogenerated mock type for the CollectionHistoryRepository type
type CollectionHistoryRepository struct {
	mock.Mock
}

// CreateIfNotExists provides a mock function with given fields: c, collectionID
func (_m *CollectionHistoryRepository) CreateIfNotExists(c context.Context, collectionID string) error {
	ret := _m.Called(c, collectionID)

	if len(ret) == 0 {
		panic("no return value specified for CreateIfNotExists")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(c, collectionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: c, collectionID
func (_m *CollectionHistoryRepository) GetByID(c context.Context, collectionID string) (domain.CollectionHistory, error) {
	ret := _m.Called(c, collectionID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.CollectionHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.CollectionHistory, error)); ok {
		return rf(c, collectionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.CollectionHistory); ok {
		r0 = rf(c, collectionID)
	} else {
		r0 = ret.Get(0).(domain.CollectionHistory)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, collectionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateByID provides a mock function with given fields: c, collectionID, item
func (_m *CollectionHistoryRepository) UpdateByID(c context.Context, collectionID string, item domain.SmallHistoryItem) error {
	ret := _m.Called(c, collectionID, item)

	if len(ret) == 0 {
		panic("no return value specified for UpdateByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.SmallHistoryItem) error); ok {
		r0 = rf(c, collectionID, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCollectionHistoryRepository creates a new instance of CollectionHistoryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCollectionHistoryRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CollectionHistoryRepository {
	mock := &CollectionHistoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
