// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "main/domain"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// SignupUseCase is an autogenerated mock type for the SignupUseCase type
type SignupUseCase struct {
	mock.Mock
}

// Create provides a mock function with given fields: c, user
func (_m *SignupUseCase) Create(c context.Context, user *domain.User) (string, error) {
	ret := _m.Called(c, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) (string, error)); ok {
		return rf(c, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) string); ok {
		r0 = rf(c, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.User) error); ok {
		r1 = rf(c, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAccessToken provides a mock function with given fields: user, secret, expiry
func (_m *SignupUseCase) CreateAccessToken(user *domain.User, secret string, expiry int) (string, time.Time, error) {
	ret := _m.Called(user, secret, expiry)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccessToken")
	}

	var r0 string
	var r1 time.Time
	var r2 error
	if rf, ok := ret.Get(0).(func(*domain.User, string, int) (string, time.Time, error)); ok {
		return rf(user, secret, expiry)
	}
	if rf, ok := ret.Get(0).(func(*domain.User, string, int) string); ok {
		r0 = rf(user, secret, expiry)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*domain.User, string, int) time.Time); ok {
		r1 = rf(user, secret, expiry)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	if rf, ok := ret.Get(2).(func(*domain.User, string, int) error); ok {
		r2 = rf(user, secret, expiry)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateRefreshToken provides a mock function with given fields: user, secret, expiry
func (_m *SignupUseCase) CreateRefreshToken(user *domain.User, secret string, expiry int) (string, time.Time, error) {
	ret := _m.Called(user, secret, expiry)

	if len(ret) == 0 {
		panic("no return value specified for CreateRefreshToken")
	}

	var r0 string
	var r1 time.Time
	var r2 error
	if rf, ok := ret.Get(0).(func(*domain.User, string, int) (string, time.Time, error)); ok {
		return rf(user, secret, expiry)
	}
	if rf, ok := ret.Get(0).(func(*domain.User, string, int) string); ok {
		r0 = rf(user, secret, expiry)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*domain.User, string, int) time.Time); ok {
		r1 = rf(user, secret, expiry)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	if rf, ok := ret.Get(2).(func(*domain.User, string, int) error); ok {
		r2 = rf(user, secret, expiry)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUserByEmail provides a mock function with given fields: c, email
func (_m *SignupUseCase) GetUserByEmail(c context.Context, email string) (domain.User, error) {
	ret := _m.Called(c, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.User, error)); ok {
		return rf(c, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.User); ok {
		r0 = rf(c, email)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSignupUseCase creates a new instance of SignupUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSignupUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *SignupUseCase {
	mock := &SignupUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
