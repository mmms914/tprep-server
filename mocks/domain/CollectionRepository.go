// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	database "main/database"

	domain "main/domain"

	mock "github.com/stretchr/testify/mock"
)

// CollectionRepository is an autogenerated mock type for the CollectionRepository type
type CollectionRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: c, collection
func (_m *CollectionRepository) Create(c context.Context, collection *domain.Collection) (string, error) {
	ret := _m.Called(c, collection)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Collection) (string, error)); ok {
		return rf(c, collection)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Collection) string); ok {
		r0 = rf(c, collection)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Collection) error); ok {
		r1 = rf(c, collection)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteByID provides a mock function with given fields: c, collectionID
func (_m *CollectionRepository) DeleteByID(c context.Context, collectionID string) error {
	ret := _m.Called(c, collectionID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(c, collectionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByFilter provides a mock function with given fields: c, filter, opts
func (_m *CollectionRepository) GetByFilter(c context.Context, filter interface{}, opts database.FindOptions) ([]domain.Collection, error) {
	ret := _m.Called(c, filter, opts)

	if len(ret) == 0 {
		panic("no return value specified for GetByFilter")
	}

	var r0 []domain.Collection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, database.FindOptions) ([]domain.Collection, error)); ok {
		return rf(c, filter, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, database.FindOptions) []domain.Collection); ok {
		r0 = rf(c, filter, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Collection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, database.FindOptions) error); ok {
		r1 = rf(c, filter, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: c, collectionID
func (_m *CollectionRepository) GetByID(c context.Context, collectionID string) (domain.Collection, error) {
	ret := _m.Called(c, collectionID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.Collection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.Collection, error)); ok {
		return rf(c, collectionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Collection); ok {
		r0 = rf(c, collectionID)
	} else {
		r0 = ret.Get(0).(domain.Collection)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, collectionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: c, filter, update
func (_m *CollectionRepository) Update(c context.Context, filter interface{}, update interface{}) (database.UpdateResult, error) {
	ret := _m.Called(c, filter, update)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 database.UpdateResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}) (database.UpdateResult, error)); ok {
		return rf(c, filter, update)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}) database.UpdateResult); ok {
		r0 = rf(c, filter, update)
	} else {
		r0 = ret.Get(0).(database.UpdateResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, interface{}) error); ok {
		r1 = rf(c, filter, update)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateByID provides a mock function with given fields: c, collectionID, update
func (_m *CollectionRepository) UpdateByID(c context.Context, collectionID string, update interface{}) (database.UpdateResult, error) {
	ret := _m.Called(c, collectionID, update)

	if len(ret) == 0 {
		panic("no return value specified for UpdateByID")
	}

	var r0 database.UpdateResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) (database.UpdateResult, error)); ok {
		return rf(c, collectionID, update)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) database.UpdateResult); ok {
		r0 = rf(c, collectionID, update)
	} else {
		r0 = ret.Get(0).(database.UpdateResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(c, collectionID, update)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCollectionRepository creates a new instance of CollectionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCollectionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CollectionRepository {
	mock := &CollectionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
