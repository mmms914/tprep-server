// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "main/domain"

	mock "github.com/stretchr/testify/mock"
)

// UserHistoryRepository is an autogenerated mock type for the UserHistoryRepository type
type UserHistoryRepository struct {
	mock.Mock
}

// CreateIfNotExists provides a mock function with given fields: c, userID
func (_m *UserHistoryRepository) CreateIfNotExists(c context.Context, userID string) error {
	ret := _m.Called(c, userID)

	if len(ret) == 0 {
		panic("no return value specified for CreateIfNotExists")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(c, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: c, userID
func (_m *UserHistoryRepository) GetByID(c context.Context, userID string) (domain.UserHistory, error) {
	ret := _m.Called(c, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.UserHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.UserHistory, error)); ok {
		return rf(c, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.UserHistory); ok {
		r0 = rf(c, userID)
	} else {
		r0 = ret.Get(0).(domain.UserHistory)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateByID provides a mock function with given fields: c, userID, item
func (_m *UserHistoryRepository) UpdateByID(c context.Context, userID string, item domain.HistoryItem) error {
	ret := _m.Called(c, userID, item)

	if len(ret) == 0 {
		panic("no return value specified for UpdateByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.HistoryItem) error); ok {
		r0 = rf(c, userID, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserHistoryRepository creates a new instance of UserHistoryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserHistoryRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserHistoryRepository {
	mock := &UserHistoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
