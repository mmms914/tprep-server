// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "main/domain"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// CollectionUseCase is an autogenerated mock type for the CollectionUseCase type
type CollectionUseCase struct {
	mock.Mock
}

// AddCard provides a mock function with given fields: c, collectionID, card
func (_m *CollectionUseCase) AddCard(c context.Context, collectionID string, card *domain.Card) (domain.Card, error) {
	ret := _m.Called(c, collectionID, card)

	if len(ret) == 0 {
		panic("no return value specified for AddCard")
	}

	var r0 domain.Card
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.Card) (domain.Card, error)); ok {
		return rf(c, collectionID, card)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.Card) domain.Card); ok {
		r0 = rf(c, collectionID, card)
	} else {
		r0 = ret.Get(0).(domain.Card)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.Card) error); ok {
		r1 = rf(c, collectionID, card)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddLike provides a mock function with given fields: c, collectionID, userID
func (_m *CollectionUseCase) AddLike(c context.Context, collectionID string, userID string) (*domain.Collection, error) {
	ret := _m.Called(c, collectionID, userID)

	if len(ret) == 0 {
		panic("no return value specified for AddLike")
	}

	var r0 *domain.Collection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*domain.Collection, error)); ok {
		return rf(c, collectionID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *domain.Collection); ok {
		r0 = rf(c, collectionID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Collection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(c, collectionID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: c, collection, userID
func (_m *CollectionUseCase) Create(c context.Context, collection *domain.Collection, userID string) (string, error) {
	ret := _m.Called(c, collection, userID)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Collection, string) (string, error)); ok {
		return rf(c, collection, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Collection, string) string); ok {
		r0 = rf(c, collection, userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Collection, string) error); ok {
		r1 = rf(c, collection, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteByID provides a mock function with given fields: c, collectionID, userID
func (_m *CollectionUseCase) DeleteByID(c context.Context, collectionID string, userID string) error {
	ret := _m.Called(c, collectionID, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(c, collectionID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCard provides a mock function with given fields: c, collectionID, cardLocalID
func (_m *CollectionUseCase) DeleteCard(c context.Context, collectionID string, cardLocalID int) error {
	ret := _m.Called(c, collectionID, cardLocalID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) error); ok {
		r0 = rf(c, collectionID, cardLocalID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: c, collectionID
func (_m *CollectionUseCase) GetByID(c context.Context, collectionID string) (domain.Collection, error) {
	ret := _m.Called(c, collectionID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.Collection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.Collection, error)); ok {
		return rf(c, collectionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Collection); ok {
		r0 = rf(c, collectionID)
	} else {
		r0 = ret.Get(0).(domain.Collection)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, collectionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCardPhoto provides a mock function with given fields: c, objectName
func (_m *CollectionUseCase) GetCardPhoto(c context.Context, objectName string) ([]byte, error) {
	ret := _m.Called(c, objectName)

	if len(ret) == 0 {
		panic("no return value specified for GetCardPhoto")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]byte, error)); ok {
		return rf(c, objectName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(c, objectName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, objectName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutByID provides a mock function with given fields: c, collectionID, collection
func (_m *CollectionUseCase) PutByID(c context.Context, collectionID string, collection *domain.Collection) error {
	ret := _m.Called(c, collectionID, collection)

	if len(ret) == 0 {
		panic("no return value specified for PutByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.Collection) error); ok {
		r0 = rf(c, collectionID, collection)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveCardPicture provides a mock function with given fields: c, userID, collectionID, cardID, objectName
func (_m *CollectionUseCase) RemoveCardPicture(c context.Context, userID string, collectionID string, cardID int, objectName string) error {
	ret := _m.Called(c, userID, collectionID, cardID, objectName)

	if len(ret) == 0 {
		panic("no return value specified for RemoveCardPicture")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, string) error); ok {
		r0 = rf(c, userID, collectionID, cardID, objectName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveLike provides a mock function with given fields: c, collectionID, userID
func (_m *CollectionUseCase) RemoveLike(c context.Context, collectionID string, userID string) (*domain.Collection, error) {
	ret := _m.Called(c, collectionID, userID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveLike")
	}

	var r0 *domain.Collection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*domain.Collection, error)); ok {
		return rf(c, collectionID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *domain.Collection); ok {
		r0 = rf(c, collectionID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Collection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(c, collectionID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchPublic provides a mock function with given fields: c, text, count, offset, sortBy, category, userID
func (_m *CollectionUseCase) SearchPublic(c context.Context, text string, count int, offset int, sortBy string, category string, userID string) ([]domain.Collection, error) {
	ret := _m.Called(c, text, count, offset, sortBy, category, userID)

	if len(ret) == 0 {
		panic("no return value specified for SearchPublic")
	}

	var r0 []domain.Collection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int, string, string, string) ([]domain.Collection, error)); ok {
		return rf(c, text, count, offset, sortBy, category, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int, string, string, string) []domain.Collection); ok {
		r0 = rf(c, text, count, offset, sortBy, category, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Collection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int, string, string, string) error); ok {
		r1 = rf(c, text, count, offset, sortBy, category, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchPublicByAuthor provides a mock function with given fields: c, author
func (_m *CollectionUseCase) SearchPublicByAuthor(c context.Context, author string) ([]domain.Collection, error) {
	ret := _m.Called(c, author)

	if len(ret) == 0 {
		panic("no return value specified for SearchPublicByAuthor")
	}

	var r0 []domain.Collection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]domain.Collection, error)); ok {
		return rf(c, author)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.Collection); ok {
		r0 = rf(c, author)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Collection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, author)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCard provides a mock function with given fields: c, collectionID, card
func (_m *CollectionUseCase) UpdateCard(c context.Context, collectionID string, card *domain.Card) error {
	ret := _m.Called(c, collectionID, card)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.Card) error); ok {
		r0 = rf(c, collectionID, card)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadCardPhoto provides a mock function with given fields: c, userID, collectionID, cardID, picture, size
func (_m *CollectionUseCase) UploadCardPhoto(c context.Context, userID string, collectionID string, cardID int, picture io.Reader, size int64) (string, error) {
	ret := _m.Called(c, userID, collectionID, cardID, picture, size)

	if len(ret) == 0 {
		panic("no return value specified for UploadCardPhoto")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, io.Reader, int64) (string, error)); ok {
		return rf(c, userID, collectionID, cardID, picture, size)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, io.Reader, int64) string); ok {
		r0 = rf(c, userID, collectionID, cardID, picture, size)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int, io.Reader, int64) error); ok {
		r1 = rf(c, userID, collectionID, cardID, picture, size)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCollectionUseCase creates a new instance of CollectionUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCollectionUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *CollectionUseCase {
	mock := &CollectionUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
