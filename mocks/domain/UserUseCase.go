// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "main/domain"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// UserUseCase is an autogenerated mock type for the UserUseCase type
type UserUseCase struct {
	mock.Mock
}

// DeleteByID provides a mock function with given fields: c, userID
func (_m *UserUseCase) DeleteByID(c context.Context, userID string) error {
	ret := _m.Called(c, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(c, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: c, userID
func (_m *UserUseCase) GetByID(c context.Context, userID string) (domain.User, error) {
	ret := _m.Called(c, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.User, error)); ok {
		return rf(c, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.User); ok {
		r0 = rf(c, userID)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfilePicture provides a mock function with given fields: c, userID
func (_m *UserUseCase) GetProfilePicture(c context.Context, userID string) ([]byte, error) {
	ret := _m.Called(c, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetProfilePicture")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]byte, error)); ok {
		return rf(c, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(c, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutByID provides a mock function with given fields: c, userID, user
func (_m *UserUseCase) PutByID(c context.Context, userID string, user *domain.User) error {
	ret := _m.Called(c, userID, user)

	if len(ret) == 0 {
		panic("no return value specified for PutByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.User) error); ok {
		r0 = rf(c, userID, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveProfilePicture provides a mock function with given fields: c, userID
func (_m *UserUseCase) RemoveProfilePicture(c context.Context, userID string) error {
	ret := _m.Called(c, userID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveProfilePicture")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(c, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadProfilePicture provides a mock function with given fields: c, userID, picture, size
func (_m *UserUseCase) UploadProfilePicture(c context.Context, userID string, picture io.Reader, size int64) error {
	ret := _m.Called(c, userID, picture, size)

	if len(ret) == 0 {
		panic("no return value specified for UploadProfilePicture")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, int64) error); ok {
		r0 = rf(c, userID, picture, size)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserUseCase creates a new instance of UserUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUseCase {
	mock := &UserUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
