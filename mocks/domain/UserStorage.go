// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// UserStorage is an autogenerated mock type for the UserStorage type
type UserStorage struct {
	mock.Mock
}

// GetObject provides a mock function with given fields: c, objectName
func (_m *UserStorage) GetObject(c context.Context, objectName string) ([]byte, error) {
	ret := _m.Called(c, objectName)

	if len(ret) == 0 {
		panic("no return value specified for GetObject")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]byte, error)); ok {
		return rf(c, objectName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(c, objectName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, objectName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutObject provides a mock function with given fields: c, objectName, reader, objectSize
func (_m *UserStorage) PutObject(c context.Context, objectName string, reader io.Reader, objectSize int64) error {
	ret := _m.Called(c, objectName, reader, objectSize)

	if len(ret) == 0 {
		panic("no return value specified for PutObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, int64) error); ok {
		r0 = rf(c, objectName, reader, objectSize)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveObject provides a mock function with given fields: c, objectName
func (_m *UserStorage) RemoveObject(c context.Context, objectName string) error {
	ret := _m.Called(c, objectName)

	if len(ret) == 0 {
		panic("no return value specified for RemoveObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(c, objectName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserStorage creates a new instance of UserStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserStorage {
	mock := &UserStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
