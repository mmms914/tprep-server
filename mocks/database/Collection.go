// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	database "main/database"

	mock "github.com/stretchr/testify/mock"

	options "go.mongodb.org/mongo-driver/v2/mongo/options"
)

// Collection is an autogenerated mock type for the Collection type
type Collection struct {
	mock.Mock
}

// DeleteOne provides a mock function with given fields: _a0, _a1
func (_m *Collection) DeleteOne(_a0 context.Context, _a1 interface{}) (int64, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOne")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (int64, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) int64); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields: _a0, _a1, _a2
func (_m *Collection) Find(_a0 context.Context, _a1 interface{}, _a2 ...options.Lister[options.FindOptions]) (database.Cursor, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 database.Cursor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...options.Lister[options.FindOptions]) (database.Cursor, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...options.Lister[options.FindOptions]) database.Cursor); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.Cursor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...options.Lister[options.FindOptions]) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOne provides a mock function with given fields: _a0, _a1
func (_m *Collection) FindOne(_a0 context.Context, _a1 interface{}) database.SingleResult {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FindOne")
	}

	var r0 database.SingleResult
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) database.SingleResult); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.SingleResult)
		}
	}

	return r0
}

// InsertOne provides a mock function with given fields: _a0, _a1
func (_m *Collection) InsertOne(_a0 context.Context, _a1 interface{}) (string, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for InsertOne")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplaceOne provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Collection) ReplaceOne(_a0 context.Context, _a1 interface{}, _a2 interface{}, _a3 ...options.Lister[options.ReplaceOptions]) (database.UpdateResult, error) {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ReplaceOne")
	}

	var r0 database.UpdateResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...options.Lister[options.ReplaceOptions]) (database.UpdateResult, error)); ok {
		return rf(_a0, _a1, _a2, _a3...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...options.Lister[options.ReplaceOptions]) database.UpdateResult); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Get(0).(database.UpdateResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, interface{}, ...options.Lister[options.ReplaceOptions]) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMany provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Collection) UpdateMany(_a0 context.Context, _a1 interface{}, _a2 interface{}, _a3 ...options.Lister[options.UpdateOptions]) (database.UpdateResult, error) {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMany")
	}

	var r0 database.UpdateResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...options.Lister[options.UpdateOptions]) (database.UpdateResult, error)); ok {
		return rf(_a0, _a1, _a2, _a3...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...options.Lister[options.UpdateOptions]) database.UpdateResult); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Get(0).(database.UpdateResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, interface{}, ...options.Lister[options.UpdateOptions]) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOne provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Collection) UpdateOne(_a0 context.Context, _a1 interface{}, _a2 interface{}, _a3 ...options.Lister[options.UpdateOptions]) (database.UpdateResult, error) {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOne")
	}

	var r0 database.UpdateResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...options.Lister[options.UpdateOptions]) (database.UpdateResult, error)); ok {
		return rf(_a0, _a1, _a2, _a3...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...options.Lister[options.UpdateOptions]) database.UpdateResult); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Get(0).(database.UpdateResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, interface{}, ...options.Lister[options.UpdateOptions]) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCollection creates a new instance of Collection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCollection(t interface {
	mock.TestingT
	Cleanup(func())
}) *Collection {
	mock := &Collection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
